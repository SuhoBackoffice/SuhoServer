plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'baekgwa'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // SpringBoot actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // SpringBoot Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // H2
    runtimeOnly 'com.h2database:h2'

    // Test
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // P6Spy Spring Boot Starter
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.11.0'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Excel reader
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Jacoco - start
jacoco {
    toolVersion = "0.8.13"
}

tasks.named('test') {
    finalizedBy 'jacocoTestReport'
}

tasks.named('jacocoTestReport') {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/global/**',
                            '**/infra/**',
                            '**/SuhoServerApplication*'
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
//            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '**/global/**',
                    '**/infra/**',
                    '**/CoTreeApplication*'
            ]
        }
    }
}
// Jacoco - end

// Querydsl generated directory setting - start
def generatedDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += generatedDir
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generatedDir)
}

clean {
    doFirst {
        delete file(generatedDir)
    }
}
// Querydsl generated directory setting - end